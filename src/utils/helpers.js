// ============================================
// üé≤ FUN√á√ïES AUXILIARES
// ============================================

/**
 * Gera um n√∫mero aleat√≥rio entre min e max (inclusive)
 * @param {number} min - Valor m√≠nimo
 * @param {number} max - Valor m√°ximo
 * @returns {number} N√∫mero aleat√≥rio
 */
export function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * Verifica se duas posi√ß√µes s√£o iguais
 * @param {Object} pos1 - Primeira posi√ß√£o {x, y}
 * @param {Object} pos2 - Segunda posi√ß√£o {x, y}
 * @returns {boolean} True se forem iguais
 */
export function isSamePosition(pos1, pos2) {
  return pos1.x === pos2.x && pos1.y === pos2.y;
}

/**
 * Verifica se uma posi√ß√£o est√° dentro de uma lista de posi√ß√µes
 * @param {Object} position - Posi√ß√£o a verificar {x, y}
 * @param {Array} positions - Array de posi√ß√µes [{x, y}, ...]
 * @returns {boolean} True se a posi√ß√£o estiver na lista
 */
export function isPositionInList(position, positions) {
  return positions.some(pos => isSamePosition(pos, position));
}

/**
 * Clona um objeto profundamente (√∫til para copiar posi√ß√µes)
 * @param {Object} obj - Objeto a ser clonado
 * @returns {Object} C√≥pia do objeto
 */
export function deepClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}

/**
 * Converte coordenadas do grid para pixels do canvas
 * @param {number} gridCoord - Coordenada no grid (0-19)
 * @param {number} cellSize - Tamanho da c√©lula em pixels
 * @returns {number} Coordenada em pixels
 */
export function gridToPixel(gridCoord, cellSize) {
  return gridCoord * cellSize;
}

/**
 * Converte pixels do canvas para coordenadas do grid
 * @param {number} pixelCoord - Coordenada em pixels
 * @param {number} cellSize - Tamanho da c√©lula em pixels
 * @returns {number} Coordenada no grid
 */
export function pixelToGrid(pixelCoord, cellSize) {
  return Math.floor(pixelCoord / cellSize);
}