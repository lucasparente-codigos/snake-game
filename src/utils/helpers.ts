// ============================================
// üé≤ FUN√á√ïES AUXILIARES
// ============================================

import type { Position } from '../types';

/**
 * Gera um n√∫mero aleat√≥rio entre min e max (inclusive)
 * @param min - Valor m√≠nimo
 * @param max - Valor m√°ximo
 * @returns N√∫mero aleat√≥rio
 */
export function randomInt(min: number, max: number): number {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * Verifica se duas posi√ß√µes s√£o iguais
 * @param pos1 - Primeira posi√ß√£o
 * @param pos2 - Segunda posi√ß√£o
 * @returns True se forem iguais
 */
export function isSamePosition(pos1: Position, pos2: Position): boolean {
  return pos1.x === pos2.x && pos1.y === pos2.y;
}

/**
 * Verifica se uma posi√ß√£o est√° dentro de uma lista de posi√ß√µes
 * @param position - Posi√ß√£o a verificar
 * @param positions - Array de posi√ß√µes
 * @returns True se a posi√ß√£o estiver na lista
 */
export function isPositionInList(position: Position, positions: Position[]): boolean {
  return positions.some(pos => isSamePosition(pos, position));
}

/**
 * Clona um objeto profundamente (√∫til para copiar posi√ß√µes)
 * @param obj - Objeto a ser clonado
 * @returns C√≥pia do objeto
 */
export function deepClone<T>(obj: T): T {
  return JSON.parse(JSON.stringify(obj));
}

/**
 * Converte coordenadas do grid para pixels do canvas
 * @param gridCoord - Coordenada no grid (0-19)
 * @param cellSize - Tamanho da c√©lula em pixels
 * @returns Coordenada em pixels
 */
export function gridToPixel(gridCoord: number, cellSize: number): number {
  return gridCoord * cellSize;
}

/**
 * Converte pixels do canvas para coordenadas do grid
 * @param pixelCoord - Coordenada em pixels
 * @param cellSize - Tamanho da c√©lula em pixels
 * @returns Coordenada no grid
 */
export function pixelToGrid(pixelCoord: number, cellSize: number): number {
  return Math.floor(pixelCoord / cellSize);
}